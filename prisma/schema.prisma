// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model user {
  id            Int     @id @default(autoincrement())
  username      String
  display_name  String?
  email         String  @unique
  password      String
  refresh_token String? @db.Text


  feed    feed[]
  like    like_user[]
  comment comment_user[]
  bio     bio_user?

  notificationsReceived notification[] @relation("ReceivedNotifications")
  notificationsSent     notification[] @relation("SentNotifications")

  comment_likes comment_like[]
}

model feed {
  id          Int      @id @default(autoincrement())
  user_id     Int
  image       String
  address     String
  description String
  like_count  Int
  save_count  Int
  createdAt   DateTime @default(now())

  user    user @relation(fields: [user_id], references: [id])
  comment      comment_user[]
  like         like_user[]
  notification notification[]
}

model like_user {
  id Int @id @default(autoincrement())

  isLike Boolean @default(false)

  user_id Int
  user    user @relation(fields: [user_id], references: [id])

  feed_id Int
  feed    feed @relation(fields: [feed_id], references: [id])

  @@unique([user_id, feed_id])
}

model comment_user {
  id            Int      @id @default(autoincrement())
  user_id       Int
  feed_id       Int
  field_comment String
  like_count    Int?     @default(0)
  createdAt     DateTime @default(now())

  user user @relation(fields: [user_id], references: [id])
  feed feed @relation(fields: [feed_id], references: [id])

  likes comment_like[]
}

model comment_like {
  id Int @id @default(autoincrement())

  user_id    Int
  comment_id Int
  createdAt  DateTime @default(now())

  user    user         @relation(fields: [user_id], references: [id])
  comment comment_user @relation(fields: [comment_id], references: [id])

  @@unique([user_id, comment_id])
}

model bio_user {
  id      Int    @id @default(autoincrement())
  bio     String
  user_id Int    @unique
  user    user   @relation(fields: [user_id], references: [id])
}

model notification {
  id        Int      @id @default(autoincrement())
  type      String?
  actorId   Int
  targetId  Int
  feedId    Int
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)

  actor  user  @relation("SentNotifications", fields: [actorId], references: [id])
  target user  @relation("ReceivedNotifications", fields: [targetId], references: [id])
  feed   feed? @relation(fields: [feedId], references: [id])
}
